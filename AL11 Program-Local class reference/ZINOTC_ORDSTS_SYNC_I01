*&---------------------------------------------------------------------*
*& Include          ZINOTC_ORDSTS_SYNC_I01
*&---------------------------------------------------------------------*
CLASS lcl_ordsts_sync IMPLEMENTATION.
  METHOD constructor.
    FINAL(ls_status) = zcl_ca_enh_util=>get_instance( )->check_enh( iv_ricef_id = gc_ricef_id   "Check enhancement framework activation
                                                                     iv_subarea  = gc_sub_area ).
    IF ls_status-active = abap_true.
      "Get default and test path directories maintianed in enhancment framework
      lv_file_path = VALUE #( ls_status-param_list[ field_name = gc_file_path  ]-value_low OPTIONAL ).
      lv_test_file_path = VALUE #( ls_status-param_list[ field_name = gc_test_file_path  ]-value_low OPTIONAL ).
    ENDIF.
  ENDMETHOD.
  METHOD main.
    get_data( ).
    populate_header_data( ).
    populate_csv_data( ).
    write_to_app_server( ).
  ENDMETHOD.

  METHOD get_data.
    SELECT k~knref,a~kunnr,a~vbeln,p~posnr,a~bstnk,a~vdatu,a~erdat,a~erzet,a~spstg,a~abstk,a~gbstk,p~abgru,
           m~zz1_mchl1_brand_prd,p~werks,
           lk~vbeln AS vbeln_del, a~lifsk
           FROM vbak AS a
           INNER JOIN vbap AS p
           ON a~vbeln = p~vbeln

           LEFT OUTER JOIN vbkd AS d
           ON a~vbeln = d~vbeln
           LEFT OUTER JOIN knvp AS k
           ON a~kunnr = k~kunnr AND a~vkorg = k~vkorg AND a~vtweg = k~vtweg  AND k~parvw = 'AG'
           LEFT OUTER JOIN mara AS m
           ON p~matnr = m~matnr
           LEFT OUTER JOIN lips AS lp
           ON p~vbeln = lp~vgbel AND p~posnr = lp~vgpos
           LEFT OUTER JOIN likp AS lk
           ON lp~vbeln = lk~vbeln AND lk~wbstk <> 'C'

           WHERE a~vkorg = @p_vkorg AND a~vtweg = @p_vtweg AND  a~kunnr IN @s_kunnr
           AND a~erdat IN @s_docdat
           AND a~auart IN @s_ordtyp AND  d~bsark IN @s_potyp

           INTO TABLE @DATA(lt_orders).

    IF lt_orders IS NOT INITIAL.
      SELECT lifsp, vtext
        FROM  tvlst "Since Buffered table should not be in  join
        FOR ALL ENTRIES IN @lt_orders
        WHERE lifsp = @lt_orders-lifsk AND spras = 'E'
        INTO TABLE @DATA(lt_tvlst).
    ELSEIF lt_orders IS INITIAL.
      MESSAGE TEXT-017 TYPE 'E'.
    ENDIF.

    SORT lt_orders BY vbeln posnr zz1_mchl1_brand_prd werks ASCENDING.
    DELETE ADJACENT DUPLICATES FROM lt_orders COMPARING  vbeln posnr .

    LOOP AT lt_orders INTO DATA(ls_ord) "Loop group by order/vbeln
         GROUP BY ( vbeln = ls_ord-vbeln )
                  ASCENDING
                  ASSIGNING FIELD-SYMBOL(<lfs_group>).

      CLEAR : ls_ordsts_data,lv_status.
      LOOP AT GROUP <lfs_group> ASSIGNING FIELD-SYMBOL(<lfs_members>). "Consider multiple product groups/plants into one raw with tab delimiter
        IF ls_ordsts_data IS INITIAL.
          ls_ordsts_data = CORRESPONDING #( <lfs_members> ).
        ELSE. "Get duplicate values

          "get plant multiple values
          IF  ls_ordsts_data-werks NS <lfs_members>-werks. "Containes no string
            ls_ordsts_data-werks = |{ ls_ordsts_data-werks }{ gc_tab }{ <lfs_members>-werks  }|.
          ENDIF.
          "Get multiple product group values
          IF  ls_ordsts_data-zz1_mchl1_brand_prd NS <lfs_members>-zz1_mchl1_brand_prd. "Containes no string
            ls_ordsts_data-zz1_mchl1_brand_prd = |{ ls_ordsts_data-zz1_mchl1_brand_prd }{ gc_tab }{ <lfs_members>-zz1_mchl1_brand_prd  }|.
          ENDIF.
        ENDIF.

        "Order status determination
        IF <lfs_members>-spstg = 'C'.
          lv_status = TEXT-blk. "'Blocked'
        ELSEIF <lfs_members>-abstk = 'C'.
          lv_status = TEXT-can. "'Cancelled'.
        ELSEIF <lfs_members>-gbstk <> 'C'.
          lv_status = TEXT-inp. "'In-Progress'.
        ELSEIF <lfs_members>-gbstk = 'C' .
*       If any delivery  values found – Update value as ‚‘In-Progress‘
*	      If No delivery values found – Update value as ‚‘Completed‘.
          IF NOT lv_status = TEXT-inp. "In-progress
            lv_status = TEXT-com. "'Completed'.
          ENDIF.
          IF <lfs_members>-vbeln_del IS NOT INITIAL.
            lv_status = TEXT-inp.
          ENDIF.

        ENDIF.
      ENDLOOP.   .
      IF <lfs_members>-lifsk IS NOT INITIAL .
        ls_ordsts_data-lifsk = |{ <lfs_members>-lifsk } - { VALUE #( lt_tvlst[ lifsp = <lfs_members>-lifsk ]-vtext OPTIONAL ) }|. "Format ex. 30 - Price Chg. Approval , concat ( lifsk, '-',vtext )
      ENDIF.
      ls_ordsts_data-ordsts = lv_status.
      APPEND ls_ordsts_data TO lt_ordsts_data.
      CLEAR :ls_ordsts_data,lv_status.

    ENDLOOP.
  ENDMETHOD.

  METHOD populate_header_data.
    CONCATENATE TEXT-005    "CUSTOMER NAME
                 TEXT-006    "SO NUMBER
                 TEXT-007    "ORDER ID
                 TEXT-008    "RDD
                 TEXT-009    "CREATION DATE
                 TEXT-010    "CREATION TIME
                 TEXT-011    "ORDER STATUS
                 TEXT-012    "PRODUCT GROUP
                 TEXT-013    "PLANT
                 TEXT-014    "ORDER BLOCK
                 INTO ls_csv
                 SEPARATED BY gc_comma.

    APPEND ls_csv TO lt_csv.

  ENDMETHOD.

  METHOD convert_to_csv.
    DATA lv_field TYPE string.

    FIELD-SYMBOLS <lfs_field> TYPE any.

    DO.
      ASSIGN COMPONENT sy-index OF STRUCTURE is_ordsts_data TO <lfs_field>.
      IF sy-subrc <> 0.
        EXIT.
      ENDIF.

      lv_field = <lfs_field>.
      lv_field = condense( lv_field ).

      " Concatenate the fields to one single line separated by delimiter ','
      IF sy-index = 1.
        es_csv = lv_field.
      ELSE.
        CONCATENATE es_csv lv_field INTO es_csv SEPARATED BY gc_comma.
      ENDIF.
    ENDDO.
  ENDMETHOD.

  METHOD populate_csv_data.
    LOOP AT lt_ordsts_data ASSIGNING FIELD-SYMBOL(<lf_ordsts_data>).
      ls_csv = convert_to_csv( IMPORTING is_ordsts_data = <lf_ordsts_data> ).
      APPEND ls_csv TO lt_csv.
    ENDLOOP.
  ENDMETHOD.

  METHOD write_to_app_server.
    DATA lv_filepath TYPE epspath.
    IF p_test = abap_true AND lv_test_file_path IS NOT INITIAL.
      p_file = lv_test_file_path.
    ENDIF.
    " Check if the app server path ends with '/'
    FINAL(lv_length) = strlen( p_file ).
    IF p_file+lv_length(1) <> '/'.
      p_file = |{ p_file }/|.
    ENDIF.

    " Build order status file name
    FINAL(lv_filename) = |{ p_vkorg }_{ p_vtweg }_{ sy-datum }_{ sy-uzeit }.csv|.
    CONCATENATE p_file lv_filename
                INTO lv_filepath.

    " Write data into application server file
    OPEN DATASET lv_filepath FOR OUTPUT IN TEXT MODE ENCODING DEFAULT.
    IF sy-subrc = 0.
      LOOP AT lt_csv ASSIGNING FIELD-SYMBOL(<lfs_csv>).
        TRANSFER <lfs_csv> TO lv_filepath.
      ENDLOOP.
      CLOSE DATASET lv_filepath.

      FINAL(upload_message) = |{ TEXT-015 } { p_file }|.
      MESSAGE upload_message TYPE gc_success.
    ELSE.
      MESSAGE ID sy-msgid
              TYPE sy-msgty
              NUMBER sy-msgno
              WITH sy-msgv1
                   sy-msgv2
                   sy-msgv3
                   sy-msgv4.
    ENDIF.
  ENDMETHOD.

  METHOD validate_app_path.
    IF p_test = abap_true AND lv_test_file_path IS NOT INITIAL.
      p_file = lv_test_file_path.
    ENDIF.
    DATA lt_dir_list TYPE STANDARD TABLE OF epsfili.

    CALL FUNCTION 'EPS_GET_DIRECTORY_LISTING'
      EXPORTING
        dir_name               = p_file
      TABLES
        dir_list               = lt_dir_list
      EXCEPTIONS
        invalid_eps_subdir     = 1
        sapgparam_failed       = 2
        build_directory_failed = 3
        no_authorization       = 4
        read_directory_failed  = 5
        too_many_read_errors   = 6
        empty_directory_list   = 7
        OTHERS                 = 8.
    IF     sy-subrc <> 0
       AND sy-subrc <> 7.
      MESSAGE TEXT-016 TYPE gc_error . "##no_text.
    ENDIF.
  ENDMETHOD.
ENDCLASS.
